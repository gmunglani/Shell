# MESH
randomness              = 0                  #                      random noise added to all nodes (multiple of min. element size)
project                 = 0,0,0              # length               all mesh nodes are projected onto these radii, if nonzero
scale                   = 0.099,0.099,0.099  # length               all mesh nodes are rescaled by this vector (default: 1,1,1)
rotate                  = 0,0,0              #                      all mesh nodes are rotated by this pseudovector (z,x,z, units: 2*pi, default: 0,0,0)
translate               = 0,0,0              # length               all mesh nodes are translated by this vector (default: 0,0,0)
refinements             = 4                  #                      number of mesh refinements
extra_order             = 0                  #                      0 for a single quadrature point per element, higher for more
add_ghosts              = true               #                      set to false if the outermost element row should be used as ghosts

# TIME INTEGRATION
newmark_beta            = 0.25               #                      first Newmark parameter
newmark_gamma           = 0.5                #                      second Newmark parameter
dt                      = 1e-6               # time                 the (initial) simulation time increment
time_steps              = 0                  #                      run until this number of timesteps is reached (0 for infinite)
stopping_criterion      = t>0.3              #                      [function] run until this criterion evaluates to true (0 for infinite)
stop_on_problem         = false              #                      whether or not the simulation should be stopped upon encountering minor problems

# ADAPTIVE STEPSIZE CONTROL
adapt_dt_every          = 1                  #                      try to adapt dt every x timesteps (0 for constant dt)
dt_min                  = 0                  # time                 minimum time increment (0 for the machine precision)
dt_max                  = 0                  # time                 maximum time increment (0 for infinite)
rel_loc_err_max         = 5e-4               #                      upper bound for the predicted relative error per timestep for explicit integration
rel_loc_err_min         = 5e-5               #                      lower bound

# OUTPUT
walltime_limit          = 0                  #                      stop and write a state file after this wall time in seconds has been reached (0 for never)
data_time               = 0.001              #                      print data after x simulation time units (0 for deactivated)
vtk_time                = 0.001              #                      write vtk file after x simulation time units (0 for deactivated)
state_time              = 21600              #                      write state file after x wallclock secs (0 for deactivated, but always at the end or upon SIGTERM)

# MATERIAL
shell_mass_density      = 1e3                # mass/length^3        [function] shell mass density
shell_young_modulus     = 1e9                # mass/length*time^2   [function] Young's modulus for the shell
shell_poisson_ratio     = 1/3                #                      [function] Poisson ratio for the shell
bulk_modulus            = 0                  # mass/length*time^2   [function] bulk modulus for enclosed volume (nonzero only for closed meshes)
memb_stiff_mult         = 1                  #                      [function] membrane stiffness multiplier (default: 1)
bend_stiff_mult         = 1                  #                      [function] bending stiffness multiplier (default: 1)

# GEOMETRY
thickness               = 1e-3               # length               [function] shell thickness
cavity                  = ellipsoid          #                      one of box, cylinder, ellipsoid
Rx                      = 0.1*exp(-4*t)      # length               [function] semiaxis of the cavity in x direction
Ry                      = 0.1*exp(-4*t)      # length               [function] semiaxis of the cavity in y direction
Rz                      = 0.1*exp(-4*t)      # length               [function] semiaxis of the cavity in z direction

# BOUNDARY CONDITIONS
shell_boundary          = free               #                      one of clamped[_weak], pinned[_weak], free[_weak]
bc_coords               = 7                  #                      bitmask indicating in which dimensions the BCs are applied (1=x, 2=y, 4=z, default: 7)
bc_every                = 0                  #                      apply boundary conditions every x timesteps (0 for never)
bc_stiff_mult           = 1                  #                      [function] prefactor to the membrane stiffness in the weak BC stiffness
bc_criterion            = 1                  #                      [function] apply BCs only at locations for which this criterion evaluates to true

# DYNAMICS
damping_alpha           = 160                # 1/time               [function] damping mass prefactor (c = alpha*m + beta*k + gamma)
damping_beta            = 0                  # time                 [function] damping stiffness prefactor
damping_gamma           = 0                  # mass/time            [function] viscous damping coefficient
damping_rotation        = 0                  # mass/time            [function] prefactor to the force opposed to the angular velocity
perturbation_rate       = 0                  # 1/time               [function] the rate at which the shell is perturbed
perturbation_energy     = 0                  # mass*length^2/time^2 [function] the amount of thermal energy added at the perturbation rate
gravity                 = 0                  # length/time^2        [function] gravity constant
gravity_dir             = 2                  #                      coordinate (0,1,2) in which gravity is applied
pressure                = 0                  # mass/length*time^2   [function] pressure load
pressure_base           = local              #                      base for pressure (one of local, cartesian, cylindrical, spherical)
pressure_dir            = 2                  #                      coordinate (0,1,2) in pressure_base in which the pressure is applied
growth1                 = 1                  #                      [function] growth in the first in-plane direction, < 1 for shrinkage, > 1 for growth
growth2                 = 1                  #                      [function] same as above, but in the second in-plane direction
growth_base             = local              #                      base for G = diag(g1,g2,g3): local (a1,a2,a3), cartesian (x,y,z), cylindrical (x,r,phi)
thickness_dir           = 2                  #                      coordinate (0,1,2) in growth_base in which the shell has its thickness
metric_growth_rate      = 0                  # 1/length^2*time      [function] grow with the metric tensor using this proportionality constant
curvature_growth_rate   = 0                  # 1/length*time        [function] grow with the curvature tensor using this proportionality constant
grow_mass               = true               #                      whether mass should be recalculated in volumetric growth
volume_growth           = 1                  #                      [function] multiple of the initial enclosed volume as target volume
stand_still             = false              #                      set to true if the shell should not move

# CONTACTS
shell_shell_contact     = linear             #                      the type of self-contact (one of linear, smooth, none)
shell_cavity_contact    = true               #                      turn interaction with cavity on/off
mu_s                    = 0                  #                      [function] static friction coefficient for self-contacts
mu_d                    = 0                  #                      [function] dynamic friction coefficient for self-contacts
mu_s_cavity             = 0                  #                      [function] static friction coefficient for cavity contacts
mu_d_cavity             = 0                  #                      [function] dynamic friction coefficient for cavity contacts
self_damping            = 0                  # time                 [function] damping prefactor for normal force due to self-penetration (c=this*k)
cavity_damping          = 0                  # time                 [function] damping prefactor for normal force due to cavity penetration (c=this*k)
self_friction_damping   = 0                  # time                 [function] damping prefactor for auxiliary spring in static self-contact friction (c=this*k)
cavity_friction_damping = 0                  # time                 [function] damping prefactor for auxiliary spring in static cavity contact friction (c=this*k)
fric_stiff_mult         = 1                  #                      [function] static friction stiffness multiplier (default: 1)
friction_stop_velocity  = 1e-3               # length/time          below which velocity dynamic friction should become static
static_friction_tol     = 0.1                #                      how far apart two contacting objects can be for keeping the spring alive (multiple of thickness)
cell_size_mult          = 4                  #                      multiple of the average element size for the size of the linked cells
cell_margin             = 0.02               #                      the additional margin given to AABBs to reuse them for a while (multiple of cell size)
neighbor_margin         = 0.4                #                      the additional size of the topological neighborhood (multiple of shell thickness)

# NUMERICS
random_seed             = 0                  #                      any non-negative integer, if left away, the time is taken
distortion              = 1e-4               #                      initial distortion (multiple of shell thickness)
